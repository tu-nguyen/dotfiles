# ~/.bash_extras/.bash_tt

br="${BOLD}----------------------------------------------------------------------------------${NC}"

# Generalized function printer
function print_tt() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        echo "File not found: $file"
        return 1
    fi

    awk '
    BEGIN { comment="" }
    /^#/ { comment = $0; next }
    /^[a-zA-Z_][a-zA-Z0-9_]* *\(\) *\{/ {
        gsub(/^# *|^## */, "", comment)
        sub(/ *\(\) *\{/, "", $0)
        printf "%-20s → %s\n", $0, comment
        comment=""
    }' "$file"
}

function gtt() {
  printf "${BOLD}git${NC}                  → s (status -s)                → b (fancy branch)\n"
  printf "                     → st (status)                  → br (branch)\n"
  printf "                     → co (checkout)                → a (add)\n"
  printf "                     → cob (checkout -b)            → ap (add -p)\ \n"
  printf "                     → coB (checkout -B)            \n"
  
  printf "                     → c (commit)                   → d (diff)\n" 
  printf "                     → ca (commit -a)               → ds (diff --stat)\n" 
  printf "                     → cm (commit -m)               → dc (diff --cached)\n"
  printf "                     → cam (commit -a -m)           → l(diff)\n" 
  printf "                     → m (commit -m)                \n" 
  printf "%s\n" "$br"
  printf "${BOLD}git alt${NC}              → ga (add)                     → gb (branch)\n"
  printf "                     → gs (status)                  → gbr (fance branch)\n"
  printf "                     → gc (cam)                     → gcl (cl show last commit)\n"
  printf "                     → cl (log)                     → gll (bigger log)\n"
  printf "                     → crr (hard reset)             → ${GREEN}git la${NC} (to ALL git config)\n"
  printf "${BOLD}git functions${NC}      \n"
  printf "gco                  → Switch to a specified Git branch with confirmation\n"
  printf "gcob                 → Same as above but with fallback to create a branch\n"
}


function dktt() {
  dktt_ref
  printf "%s\n" "$br"
  printf "${BOLD}docker functions${NC}      \n"
  print_tt "$BASHRC_EXTRAS_PATH/.bash_docker_functions"
}

function tt() {
  printf "${BOLD}primary functions${NC}    → r (source .bashrc)           → j (jobs -l)\n"
  printf "                     → cls (clear and ls)           → df (df -H)\n"
  printf "                     → mkcd (mkdir then cd)         → du (du -ch)\n"
  printf "                     → h (history)                  → dmesg10 (10 recent logs)\n"
  printf "                     → x (exit)                     → top (htop)\n"
  printf "                     → v (vim)                      → top10 (top 10 ps)\n"
  # ls
  printf "%s\n" "$br"
  printf "${BOLD}ls${NC} & ${BOLD}cd${NC}              → ll (ls -alh)                 → ~ (cd ~)\n"
  printf "                     → la (ls -A)                   → .. (cd ..)\n"
  printf "                     → lsd (ls -a1F | grep /$)      → ... (cd ../..)\n"
  printf "                     → lt (la -lt)                  → .... (cd ../../..)\n"
  printf "                     → la (ls -A)                   → .4 (../../../../)\n"
  # cd
  printf "%s\n" "$br"
  printf "${BOLD}utils${NC}                → myip (get ip)                → now/nowtime (time)\n"
  printf "                     → ping (ping -c 5)             → nowdate (date)\n" 
  printf "                     → p4 (ping 4.2.2.2 -c 4)       → diskspace (du)\n"
  printf "                     → fastping (ping -c 100 -s.2)  → folder ()\n"
  printf "                     → ports (netstat -tulanp)      → path ()→\n"
  # other
  printf "%s\n" "$br"
  printf "${BOLD}other functions${NC}      \n"
  print_tt "$BASHRC_EXTRAS_PATH/.bash_functions"
  # other other
  printf "%s\n" "$br"
  printf "${BOLD}other tt${NC}      \n"
  printf "ttcs                 → to view bash cheatsheet\n"
  printf "gtt                  → to view git aliases\n"
  printf "dktt                 → to view docker stuff\n"

  if [[ ! -f "$HOME/.bash_extras/.bash_twork" ]]; then
    printf "tworktt              → .bash_twork ${RED}does not exist${NC} inside .bash_extras\n"
  else
    printf "tworktt              → to view twork stuff\n"
  fi
}

function ttt() {
  printf "r (source .bashrc) \n"
  printf "c (clear) \n"
  printf "cls (clear && ls) \n"
  printf "clss (clear && lsa) \n"
  printf "h (history)   \n"
  printf "x (exit) \n"
  printf "v (vim)   \n"
  printf "j (jobs -l)\n"
  printf "df (df -H) \n"
  printf "du (du -ch) \n"
  printf "top (htop) \n"
  printf "top10 (ps -eo pid,comm,%cpu,%mem --sort=-%cpu | head -n 11) \n"
  printf "dmesg10 (dmesg | tail -n 10) \n"
  printf "uptime (uptime -p) \n"
  printf "mkcd (mkdir -p $1 && cd $1) \n"
  printf "ll (ls -alh)  \n"
  printf "la (ls -A) \n"
  printf "l (ls) \n"
  printf "lsa (ls -al) \n"
  printf "lsd (ls -a1F | grep /$) \n"
  printf "lt (la -lt)  \n"
  printf "~ (cd ~) \n"
  printf ".. (cd ..) \n"
  printf "... (cd ../..) \n"
  printf ".... (cd ../../..) \n"
  printf ".4 (../../../../)\n"
  printf ".5 (../../../../..) \n"
  printf "ga (git a) \n"
  printf "gb (git b) \n"
  printf "gbr (git br) \n"
  printf "gc (git cam) \n"
  printf "gcl (git cl) \n"
  printf "gl (git l) \n"
  printf "gll (git ll) \n"
  printf "grr (git rr) \n"
  printf "gs (git st) \n"
  printf "myip (get ip) \n"
  printf "ping (ping -c 5)  \n"
  printf "p4 (ping 4.2.2.2 -c 4)  \n"
  printf "fastping (ping -c 100 -s.2) \n"
  printf "ports (netstat -tulanp)  \n"
  printf "ipt (sudo /sbin/iptables) \n"
  printf "iptlist (sudo /sbin/iptables -L -n -v --line-numbers) \n"
  printf "iptlistin (sudo /sbin/iptables -L INPUT -n -v --line-numbers) \n"
  printf "iptlistout (soursudo /sbin/iptables -L OUTPUT -n -v --line-numbers) \n"
  printf "iptlistfw (sudo /sbin/iptables -L FORWARD -n -v --line-numbers) \n"
  printf "firewall (iptlist) \n"
  printf "header (curl -I) \n"
  printf "headerc (curl -I --compress) \n"
  printf "dnstop (dnstop -l 5  eth1) \n"
  printf "vnstat (vnstat -i eth1) \n"
  printf "iftop (iftop -i eth1) \n"
  printf "tcpdump (tcpdump -i eth1 \n"
  printf "ethtool (ethtool eth1) \n"
  printf "iwconfig (iwconfig wlan0) \n"
  printf "now/nowtime (time) \n"
  printf "nowdate (date) \n"
  printf "diskspace (du) \n"
  printf "folder () \n"
  printf "path () \n"
  printf "now (source .bashrc) \n"
  printf "nowtime (source .bashrc) \n"
  printf "nowdate (source .bashrc) \n"
  printf "so0 (cmatrix) \n"
}
