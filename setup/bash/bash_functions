# ~/.bash_extras/.bash_functions

# Re-run Dotfile installation
r() {
    if [[ "$(pwd)" == *"/dotfiles" ]]; then
      IS_PROJECT_ROOT=true
      DOTFILE_PATH=$(pwd)
    else
      IS_PROJECT_ROOT=false
    fi

    echo "[INFO] Resetting settings.."
    if [ "$IS_PROJECT_ROOT" = false ]; then
      if [[ -n "$DOTFILE_PATH" ]]; then
        pushd $DOTFILE_PATH > /dev/null
      else
        echo "[ERROR] You are not in the root of the dotfile project! DOTFILE_DIR is not set. Exiting.."
        return 1
      fi
    fi

    ./install.sh
  
    if [ "$IS_PROJECT_ROOT" = false ]; then
      popd > /dev/null
    fi
    t SUCCESS "Reset successful!"
}

# Extract a file
extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           t ERROR "don't know how to extract '$1'.." ;;
       esac
   else
       t ERROR "'$1' is not a valid file!"
   fi
 }

# Display a PDF of a given man page
pdfman() {
        man -t $@ | pstopdf -i -o /tmp/$1.pdf && open /tmp/$1.pdf
}

# Print env, use -l to only display core details
printv() {
  local show_limited=false
  local env_file=""
  local limit_vars=("BASE_URL" "ALLOWED_HOSTS" "ENFIRONMENT", "POSTGRES_HOST", "POSTGRES_DB")

  # Check for -l flag
  if [[ "$1" == "-l" ]]; then
    show_limited=true
  fi

  # Search for .env in current and up to two parent directories
  for dir in "." ".." "../.."; do
    if [[ -f "$dir/.env" ]]; then
      env_file="$dir/.env"
      break
    fi
  done

  if [[ -z "$env_file" ]]; then
    t "No .env file found in current or parent directories"
    return 1
  fi

  t "Found .env at: $env_file"

  if $show_limited; then
    for var in "${limit_vars[@]}"; do
      grep -E "^$var=" "$env_file"
    done
  else
    cat "$env_file"
  fi
}

# Searches for text in all files in the current folder
ftext ()
{
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp()
{
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
	| awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

# Find a file with a pattern in name:
ff() { find . -type f -iname '*'"$*"'*' -ls ; }

# Display date and time
function now() {
  echo "$(date +"%d-%m-%Y") $(date +"%T")"
}

# Function to print all defined colors for testing
colours_test() {
    echo -e "${BLACK}BLACK${NC} ${RED}RED${NC} ${GREEN}GREEN${NC} ${YELLOW}YELLOW${NC} ${BLUE}BLUE${NC} ${MAGENTA}MAGENTA${NC} ${CYAN}CYAN${NC} ${WHITE}WHITE${NC} ${GRAY}GRAY${NC}"
    echo -e "${BRIGHT_RED}BRIGHT_RED${NC} ${BRIGHT_GREEN}BRIGHT_GREEN${NC} ${BRIGHT_YELLOW}BRIGHT_YELLOW${NC} ${BRIGHT_BLUE}BRIGHT_BLUE${NC} ${BRIGHT_MAGENTA}BRIGHT_MAGENTA${NC} ${BRIGHT_CYAN}BRIGHT_CYAN${NC} ${BRIGHT_WHITE}BRIGHT_WHITE${NC}"
    echo -e "${PINK_256}PINK_256${NC} ${PINK_TRUE}PINK_TRUE${NC}"
    echo -e "${BOLD}BOLD${NC} ${UNDERLINE}UNDERLINE${NC}"
    echo -e "${ON_BLACK}ON_BLACK${NC} ${ON_RED}ON_RED${NC} ${ON_GREEN}ON_GREEN${NC} ${ON_YELLOW}ON_YELLOW${NC} ${ON_BLUE}ON_BLUE${NC} ${ON_PURPLE}ON_PURPLE${NC} ${ON_CYAN}ON_CYAN${NC} ${ON_WHITE}ON_WHITE${NC}"
}

# Switch to a specified Git branch with confirmation
function gco() {
    local branch=$1
    if [ -z "$branch" ]; then
        t "Usage: gsw <branch_name>"
        return 1
    fi
    git checkout $branch
    if [ $? -eq 0 ]; then
        t SUCCESS "Switched to branch ${GREEN}$branch${NC}"
    else
        t ERROR "Failed to switch branch"
    fi
}

# Same as above but with fallback to create a branch
function gcob() {
    local branch=$1
    if [ -z "$branch" ]; then
        t "Usage: gsw <branch_name>"
        return 1
    fi
    git checkout $branch
    if [ $? -eq 0 ]; then
        t SUCCESS "Switched to branch ${GREEN}$branch${NC}"
    else
        git checkout -B $branch
        if [ $? -eq 0 ]; then
            t SUCCESS "Created and switched to branch ${GREEN}$branch${NC}"
        else
            t ERROR "Failed to create and switch branch"
        fi
    fi
}
