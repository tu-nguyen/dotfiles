# ~/.bash_extras/.bash_functions

# Re-run Dotfile installation
r() {
    if [[ "$(pwd)" == *"/dotfiles" ]]; then
      IS_PROJECT_ROOT=true
      DOTFILE_PATH=$(pwd)
    else
      IS_PROJECT_ROOT=false
    fi

    echo "[INFO] Resetting settings.."
    if [ "$IS_PROJECT_ROOT" = false ]; then
      if [[ -n "$DOTFILE_PATH" ]]; then
        pushd $DOTFILE_PATH > /dev/null
      else
        echo "[ERROR] You are not in the root of the dotfile project! DOTFILE_DIR is not set. Exiting.."
        return 1
      fi
    fi

    ./install.sh
  
    if [ "$IS_PROJECT_ROOT" = false ]; then
      popd > /dev/null
    fi
    t SUCCESS "Reset successful!"
}

# Extract a file
extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           t ERROR "don't know how to extract '$1'.." ;;
       esac
   else
       t ERROR "'$1' is not a valid file!"
   fi
 }

# Display a PDF of a given man page
pdfman() {
        man -t $@ | pstopdf -i -o /tmp/$1.pdf && open /tmp/$1.pdf
}

# Print env, use -l to only display core details
printv() {
  local show_limited=false
  local env_file=""
  local limit_vars=("BASE_URL" "ALLOWED_HOSTS" "ENFIRONMENT", "POSTGRES_HOST", "POSTGRES_DB")

  # Check for -l flag
  if [[ "$1" == "-l" ]]; then
    show_limited=true
  fi

  # Search for .env in current and up to two parent directories
  for dir in "." ".." "../.."; do
    if [[ -f "$dir/.env" ]]; then
      env_file="$dir/.env"
      break
    fi
  done

  if [[ -z "$env_file" ]]; then
    t "No .env file found in current or parent directories"
    return 1
  fi

  t "Found .env at: $env_file"

  if $show_limited; then
    for var in "${limit_vars[@]}"; do
      grep -E "^$var=" "$env_file"
    done
  else
    cat "$env_file"
  fi
}

# Searches for text in all files in the current folder
ftext ()
{
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Copy file with a progress bar
cpp()
{
	set -e
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
	| awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

# Find a file with a pattern in name:
ff() {
  find . -type f -iname '*'"$*"'*' -ls ;
}

# Function to print all defined colors for testing
colours_test() {
    echo -e "${BLACK}BLACK${NC} ${RED}RED${NC} ${GREEN}GREEN${NC} ${YELLOW}YELLOW${NC} ${BLUE}BLUE${NC} ${MAGENTA}MAGENTA${NC} ${CYAN}CYAN${NC} ${WHITE}WHITE${NC} ${GRAY}GRAY${NC}"
    echo -e "${BRIGHT_RED}BRIGHT_RED${NC} ${BRIGHT_GREEN}BRIGHT_GREEN${NC} ${BRIGHT_YELLOW}BRIGHT_YELLOW${NC} ${BRIGHT_BLUE}BRIGHT_BLUE${NC} ${BRIGHT_MAGENTA}BRIGHT_MAGENTA${NC} ${BRIGHT_CYAN}BRIGHT_CYAN${NC} ${BRIGHT_WHITE}BRIGHT_WHITE${NC}"
    echo -e "${PINK}PINK${NC} ${PINK_TRUE}PINK_TRUE${NC}"
    echo -e "${BOLD}BOLD${NC} ${UNDERLINE}UNDERLINE${NC}"
    echo -e "${ON_BLACK}ON_BLACK${NC} ${ON_RED}ON_RED${NC} ${ON_GREEN}ON_GREEN${NC} ${ON_YELLOW}ON_YELLOW${NC} ${ON_BLUE}ON_BLUE${NC} ${ON_PURPLE}ON_PURPLE${NC} ${ON_CYAN}ON_CYAN${NC} ${ON_WHITE}ON_WHITE${NC}"
}

# Helper functions

# general
# Display date and time
function now() {
  echo "$(date +"%d-%m-%Y") $(date +"%T")"
}

# Truncate text to a maximum length
function truncate_text() {
    local text="$1"
    local maxlen="${2:-60}"
    if (( ${#text} > maxlen )); then
        echo "${text:0:maxlen}.."
    else
        echo "$text"
    fi
}

# Helper: get color for a status
function status_colour() {
    local status="$1"
    case "$status" in
        "To Do"|"New") echo "$PINK" ;;
        "In Progress"|"Active") echo "$CYAN" ;;
        "Done"|"Closed"|"Completed"|"Resolved") echo "$GREEN" ;;
        "Blocked") echo "$RED" ;;
        *) echo "$WHITE" ;;
    esac
}

# github related functions
function gpull() {
    git pull origin $(git rev-parse --abbrev-ref HEAD)
}

function gpush() {
    git push origin $(git rev-parse --abbrev-ref HEAD)
}

# Switch to a specified Git branch with confirmation
function gco() {
    local branch=$1
    if [ -z "$branch" ]; then
        t "Usage: gsw <branch_name>"
        return 1
    fi
    git checkout $branch
    if [ $? -eq 0 ]; then
        t SUCCESS "Switched to branch ${GREEN}$branch${NC}"
    else
        t ERROR "Failed to switch branch"
    fi
}

# Same as above but with fallback to create a branch
function gcob() {
    local branch=$1
    if [ -z "$branch" ]; then
        t "Usage: gsw <branch_name>"
        return 1
    fi
    git checkout $branch
    if [ $? -eq 0 ]; then
        t SUCCESS "Switched to branch ${GREEN}$branch${NC}"
    else
        git checkout -B $branch
        if [ $? -eq 0 ]; then
            t SUCCESS "Created and switched to branch ${GREEN}$branch${NC}"
        else
            t ERROR "Failed to create and switch branch"
        fi
    fi
}

# azure related functions
# Clear the Azure CLI cache
 function azr() {
    AZ_HTTP_CACHE_BIN="$HOME/.azure/msal_http_cache.bin"
    if [ -f $AZ_HTTP_CACHE_BIN ]; then
        t WARNING "Deleting..."
        sudo rm $HOME/.azure/msal_http_cache.bin
    else
        t "Nothing to delete."
    fi
 }

# Print current Azure DevOps iteration details and tasks assigned to the user
function print_curr_iter() {
    if [[ $# -lt 4 ]]; then
        echo "Usage: print_current_iteration <ORG> <PROJECT> <TEAM> <AZDO_PAT>"
        return 1
    fi

    local ORG="$1"
    local PROJECT="$2"
    local TEAM="$3"
    local AZDO_PAT="$4"

    # Get current iteration path
    local ITERATION_API="https://dev.azure.com/$ORG/$PROJECT/$TEAM/_apis/work/teamsettings/iterations?\$timeframe=current&api-version=7.0"
    local ITERATION_PATH
    ITERATION_PATH=$(curl -s -u ":$AZDO_PAT" "$ITERATION_API" | jq -r '.value[0].path')
    if [[ -z "$ITERATION_PATH" || "$ITERATION_PATH" == "null" ]]; then
        echo "Could not determine current sprint/iteration."
        return 1
    fi

    # Get current iteration info
    local ITERATION_INFO
    ITERATION_INFO=$(curl -s -u ":$AZDO_PAT" "$ITERATION_API" | jq '.value[0]')
    local ITERATION_NAME
    ITERATION_NAME=$(echo "$ITERATION_INFO" | jq -r '.name')
    local ITERATION_START
    ITERATION_START=$(echo "$ITERATION_INFO" | jq -r '.attributes.startDate' | cut -d'T' -f1)
    local ITERATION_END
    ITERATION_END=$(echo "$ITERATION_INFO" | jq -r '.attributes.finishDate' | cut -d'T' -f1)

    # Cross-platform date parsing for END
    if date -j -f "%Y-%m-%d" "$ITERATION_END" +%s >/dev/null 2>&1; then
        END=$(date -j -f "%Y-%m-%d" "$ITERATION_END" +%s)
    else
        END=$(date -d "$ITERATION_END" +%s)
    fi

    # Calculate time remaining
    local NOW
    NOW=$(date +%s)
    local SECS_LEFT=$((END - NOW))
    local TIME_REMAINING
    if (( SECS_LEFT > 0 )); then
        local DAYS=$((SECS_LEFT / 86400))
        local HOURS=$(( (SECS_LEFT % 86400) / 3600 ))
        local MINS=$(( (SECS_LEFT % 3600) / 60 ))
        TIME_REMAINING="Time remaining: ${H}${DAYS}${NC} days and ${H}${HOURS}${NC} hours ${H}${MINS}${NC} minutes"
    else
        TIME_REMAINING="Time remaining: Ended"
    fi

    # Print header with time remaining
    echo -e "\n${BOLD}${CYAN}Current Twork Iteration: $ITERATION_NAME ($ITERATION_START â†’ $ITERATION_END)${NC}"
    echo "$TIME_REMAINING"

    # Query all tasks/chores assigned to you in current iteration
    local WIQL="SELECT [System.Id], [System.Title], [System.WorkItemType], [System.Parent], [System.State] FROM WorkItems WHERE [System.IterationPath] = '$ITERATION_PATH' AND [System.AssignedTo] = @Me AND [System.WorkItemType] IN ('Task', 'Chore')"
    local WIQL_JSON
    WIQL_JSON=$(jq -n --arg q "$WIQL" '{query: $q}')
    local WIQL_API="https://dev.azure.com/$ORG/$PROJECT/_apis/wit/wiql?api-version=7.0"
    local WIQL_RESPONSE
    WIQL_RESPONSE=$(curl -s -u ":$AZDO_PAT" -H "Content-Type: application/json" -d "$WIQL_JSON" "$WIQL_API")

    local TASK_IDS
    TASK_IDS=$(echo "$WIQL_RESPONSE" | jq -r '.workItems[]?.id' | paste -sd, -)

    if [[ -z "$TASK_IDS" ]]; then
        t WARNING "No tasks or chores found for you in the current sprint."
        return 0
    fi

    # Get details for all tasks/chores
    local DETAILS_API="https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems?ids=$TASK_IDS&fields=System.Id,System.Title,System.WorkItemType,System.Parent,System.State&api-version=7.0"
    local TASKS_JSON
    TASKS_JSON=$(curl -s -u ":$AZDO_PAT" "$DETAILS_API")

    # Collect unique parent IDs
    local PARENT_IDS
    PARENT_IDS=$(echo "$TASKS_JSON" | jq -r '.value[] | .fields."System.Parent"? ' | sort -u | paste -sd, -)

    declare -A PARENTS

    # Build associative array: id -> "type|state|title"
    if [[ -n "$PARENT_IDS" ]]; then
        local PARENT_API="https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems?ids=$PARENT_IDS&fields=System.Id,System.Title,System.WorkItemType,System.State&api-version=7.0"
        local PARENTS_JSON
        PARENTS_JSON=$(curl -s -u ":$AZDO_PAT" "$PARENT_API")
        while IFS='|' read -r id type state title; do
            PARENTS["$id"]="$type|$state|$title"
        done < <(echo "$PARENTS_JSON" | jq -r '.value[] | "\(.fields."System.Id")|\(.fields."System.WorkItemType")|\(.fields."System.State")|\(.fields."System.Title" | gsub("[\n\r]"; " "))"')
    fi

    for pid in $(echo "$PARENT_IDS" | tr ',' ' '); do
        [[ -z "$pid" ]] && continue
        IFS='|' read -r ptype pstate ptitle <<< "${PARENTS[$pid]}"
        pcolor=$(status_colour "$pstate")
        short_title=$(truncate_text "$ptitle" 60)
        printf "${BOLD} - %s %s [%b%s%b${BOLD}]: %s${NC}\n" "$pid" "$ptype" "$pcolor" "$pstate" "$NC" "$short_title"
        echo "$TASKS_JSON" | jq -r --arg pid "$pid" '
            .value[] | select(.fields."System.Parent" == ($pid|tonumber)) |
            "\(.fields."System.Id")|\(.fields."System.WorkItemType")|\(.fields."System.State")|\(.fields."System.Title")"' |
        while IFS='|' read -r cid ctype cstate ctitle; do
            ccolor=$(status_colour "$cstate")
            cshort_title=$(truncate_text "$ctitle" 60)
            printf -- "   * ${BOLD}${H}%s${NC} %s [%b%s%b]: %s\n" "$cid" "$ctype" "$ccolor" "$cstate" "$NC" "$cshort_title"
        done
    done

    # Orphan tasks/chores
    echo "$TASKS_JSON" | jq -r '
        .value[] | select(.fields."System.Parent" == null) |
        "\(.fields."System.Id")|\(.fields."System.WorkItemType")|\(.fields."System.State")|\(.fields."System.Title")"' |
    while IFS='|' read -r cid ctype cstate ctitle; do
        ccolor=$(status_colour "$cstate")
        cshort_title=$(truncate_text "$ctitle" 60)
        printf "${BOLD}${H}%s${NC} %s [%b%s%b]: %s\n" "$cid" "$ctype" "$ccolor" "$cstate" "$NC" "$cshort_title"
    done
}
