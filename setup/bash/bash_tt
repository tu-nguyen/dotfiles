# ~/.bash_extras/.bash_tt

br="${BOLD}${H}----------------------------------------------------------------------------------${NC}"

# Generalized function printer
function print_tt() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        echo "File not found: $file"
        return 1
    fi

    awk '
    BEGIN { comment="" }
    /^#/ { comment = $0; next }
    /^[a-zA-Z_][a-zA-Z0-9_]* *\(\) *\{/ {
        gsub(/^# *|^## */, "", comment)
        sub(/ *\(\) *\{/, "", $0)
        printf "  %-20s → %s\n", $0, comment
        comment=""
    }' "$file"
}

function tt() {
  printf "${BOLD}${H}tt cheatsheet${NC}\n"
  printf "%s\n" "$br"
  # TODO: add chmod aliases
  printf "${H2}primary functions${NC}      → ttt (show all tt)            → j (jobs -l)\n"
  printf "                       → cls (clear and ls)           → df (df -H)\n"
  printf "                       → mkcd (mkdir then cd)         → du (du -ch)\n"
  printf "                       → h (history)                  → dmesg10 (10 recent logs)\n"
  printf "                       → x (exit)                     → top (htop)\n"
  printf "                       → v (vim)                      → top10 (top 10 ps)\n"
  # ls
  printf "%s\n" "$br"
  printf "${H2}ls & cd${NC}                → ll (ls -alh)                 → ~ (cd ~)\n"
  printf "                       → la (ls -A)                   → .. (cd ..)\n"
  printf "                       → lsd (ls -a1F | grep /$)      → ... (cd ../..)\n"
  printf "                       → lt (la -lt)                  → .... (cd ../../..)\n"
  printf "                       → la (ls -A)                   → .4 (../../../../)\n"
  # cd
  printf "%s\n" "$br"
  printf "${H2}utils${NC}                  → myip (get ip)                → now/nowtime (time)\n"
  printf "                       → ping (ping -c 5)             → nowdate (date)\n"
  printf "                       → p4 (ping 4.2.2.2 -c 4)       → ipt (sudo /sbin/iptables)\n"
  printf "                       → ports (netstat -tulanp)      → diskspace (du)\n"
  printf "                       → folder ()                    → path ()→\n"
  # other
  printf "%s\n" "$br"
  printf "${H2}other functions${NC}      \n"
  print_tt "$HOME/.bash_extras/.bash_functions"
  # other other
  printf "%s\n" "$br"
  printf "${H2}other tt${NC}      \n"
  printf "  btt                  → to view bash cheatsheet\n"
  printf "  djtt                 → to view django cheatsheet\n"
  printf "  gtt                  → to view git aliases\n"
  printf "  makett               → to view makefile cheatsheet\n"
  printf "  pytt                 → to view python cheatsheet\n"
  printf "  dctt                 → to view docker-compose cheatsheet\n"
  printf "  dktt                 → to view docker stuff\n"
  printf "  vtt                  → to view vim cheatsheet\n"

  if [[ ! -f "$HOME/.bash_extras/.bash_personal" ]]; then
    printf "  ptt                  → .bash_personal ${RED}does not exist${NC} inside $HOME/.bash_extras\n"
  else
    printf "  ptt                  → to view personal stuff\n"
  fi

  if [[ ! -f "$HOME/.bash_extras/.bash_twork" ]]; then
    printf "  tworktt              → .bash_twork ${RED}does not exist${NC} inside $HOME/.bash_extras\n"
  else
    printf "  tworktt              → to view twork stuff\n"
  fi

  printf "%s\n" "$br"
}

function btt() {
  printf "${BOLD}${H}bash cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}navigation:${NC}\n"
  printf "  cd dir               → Change directory\n"
  printf "  cd -                 → Previous directory\n"
  printf "  pwd                  → Print working directory\n"
  printf "  ls -al               → List files\n"
  printf "%s\n" "$br"
  printf "${H2}file ops:${NC}\n"
  printf "  cp src dst           → Copy file\n"
  printf "  mv src dst           → Move/rename file\n"
  printf "  rm file              → Remove file\n"
  printf "  mkdir dir            → Make directory\n"
  printf "  touch file           → Create empty file\n"
  printf "%s\n" "$br"
  printf "${H2}search:${NC}\n"
  printf "  grep PATTERN file    → Search in file\n"
  printf "  tail -f file        → Follow file changes\n"
  printf "  find . -name '*.sh'  → Find files\n"
  printf "%s\n" "$br"
  printf "${H2}process:${NC}\n"
  printf "  ps aux               → List processes\n"
  printf "  top                  → Interactive process viewer\n"
  printf "  kill PID             → Kill process\n"
  printf "%s\n" "$br"
  printf "${H2}history & jobs:${NC}\n"
  printf "  history              → Show command history\n"
  printf "  !!                   → Repeat last command\n"
  printf "  !n                   → Repeat command n\n"
  printf "  jobs                 → List background jobs\n"
  printf "  fg/bg                → Foreground/background job\n"
  printf "%s\n" "$br"
  printf "${H2}shortcuts:${NC}\n"
  printf "  Ctrl+a               → Start of line\n"
  printf "  Ctrl+e               → End of line\n"
  printf "  Ctrl+r               → Reverse search history\n"
  printf "  Ctrl+c               → Cancel command\n"
  printf "  Ctrl+d               → Logout/EOF\n"
  printf "%s\n" "$br"
  printf "${H2}scripting:${NC}\n"
  printf "  echo \"text\"          → Print text\n"
  printf "  VAR=value            → Set variable\n"
  printf "  \$VAR                 → Use variable\n"
  printf "  for i in *; do ... done\n"
  printf "  if ...; then ...; fi\n"
  printf "  function fname() { ... }\n"
  printf "%s\n" "$br"
}

function djtt() {
  printf "${BOLD}${H}django cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}project:${NC}\n"
  printf "  django-admin startproject myproj   → New project\n"
  printf "  python manage.py startapp myapp    → New app\n"
  printf "%s\n" "$br"
  printf "${H2}run & shell:${NC}\n"
  printf "  python manage.py runserver         → Start dev server\n"
  printf "  python manage.py shell             → Django shell\n"
  printf "%s\n" "$br"
  printf "${H2}migrations:${NC}\n"
  printf "  python manage.py makemigrations    → Create migrations\n"
  printf "  python manage.py migrate           → Apply migrations\n"
  printf "%s\n" "$br"
  printf "${H2}superuser & admin:${NC}\n"
  printf "  python manage.py createsuperuser   → Create admin user\n"
  printf "%s\n" "$br"
  printf "${H2}testing:${NC}\n"
  printf "  python manage.py test              → Run tests\n"
  printf "%s\n" "$br"
  printf "${H2}other:${NC}\n"
  printf "  python manage.py showmigrations    → List migrations\n"
  printf "  python manage.py collectstatic     → Collect static files\n"
  printf "%s\n" "$br"
}

function gtt() {
  printf "${BOLD}${H}git cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}git${NC}                    → ga (add)                     → gb (branch)\n"
  printf "                       → gs (status)                  → gbr (fance branch)\n"
  printf "                       → gc (cam)                     → gbd (delete branch)\n"
  printf "                       → cl (log)                     → gcl (cl show last commit)\n"
  printf "                       → crr (hard reset)             → gll (bigger log)\n"
  printf "                       → gf (git fetch)               → gfetch (also git fetch)\n"
  printf "${H2}git alt${NC}                → s (status -s)                → b (fancy branch)\n"
  printf "                       → st (status)                  → br (branch)\n"
  printf "                       → co (checkout)                → a (add)\n"
  printf "                       → cob (checkout -b)            → ap (add -p)\ \n"
  printf "                       → coB (checkout -B)            → l(diff)\n"
  printf "                       → c (commit)                   → d (diff)\n"
  printf "                       → ca (commit -a)               → ds (diff --stat)\n"
  printf "                       → cm (commit -m)               → dc (diff --cached)\n"
  printf "                       → cam (commit -a -m)           \n"
  printf "                       → m (commit -m)                → ${H2}la${NC} (to ALL git config)\n"
  printf "%s\n" "$br"
  printf "${H2}git functions${NC}      \n"
  printf "  gpull                → Git pull with rebase and autostash\n"
  printf "  gpush                → Git push with set-upstream\n"
  printf "  gco                  → Switch to a specified Git branch with confirmation\n"
  printf "  gcob                 → Same as above but with fallback to create a branch\n"
  printf "  greset               → Hard reset on current branch\n"
  printf "  gclean               → Hard reset and removes untracked files\n"
  printf "  grn                  → Rename git branch\n"
  printf "%s\n" "$br"
}

function makett() {
  printf "${BOLD}${H}makefile cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}common targets:${NC}\n"
  printf "  make                → Run default target\n"
  printf "  make <target>       → Run specific target\n"
  printf "%s\n" "$br"
  printf "${H2}variables:${NC}\n"
  printf "  VAR = value         → Set variable\n"
  printf "  \$(VAR)              → Use variable\n"
  printf "%s\n" "$br"
  printf "${H2}phony targets:${NC}\n"
  printf "  .PHONY: clean       → Declare phony target\n"
  printf "%s\n" "$br"
  printf "${H2}examples:${NC}\n"
  printf "  clean:\n"
  printf "    rm -rf *.pyc __pycache__/\n"
  printf "%s\n" "$br"
}

function pytt() {
  printf "${BOLD}${H}python cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}run & env:${NC}\n"
  printf "  python file.py            → Run script\n"
  printf "  python -m venv venv       → Create virtualenv\n"
  printf "  source venv/bin/activate  → Activate venv\n"
  printf "  pip install package       → Install package\n"
  printf "  pip freeze > req.txt      → Export requirements\n"
  printf "  pip install -r req.txt    → Install from requirements\n"
  printf "%s\n" "$br"
  printf "${H2}common commands:${NC}\n"
  printf "  python -m http.server     → Simple HTTP server\n"
  printf "  python -i file.py         → Run and enter REPL\n"
  printf "  python -c 'code'          → Run one-liner\n"
  printf "%s\n" "$br"
  printf "${H2}testing:${NC}\n"
  printf "  pytest                    → Run tests\n"
  printf "  pytest -k test_func       → Run specific test\n"
  printf "  coverage run -m pytest    → Run tests with coverage\n"
  printf "  coverage report           → Show coverage\n"
  printf "%s\n" "$br"
  printf "${H2}formatting & lint:${NC}\n"
  printf "  black .                   → Format code\n"
  printf "  isort .                   → Sort imports\n"
  printf "  flake8 .                  → Lint code\n"
  printf "%s\n" "$br"
}

function dctt() {
  printf "${BOLD}${H}docker-compose cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}common commands:${NC}\n"
  printf "  docker-compose up -d                                → Start services\n"
  printf "  docker-compose down                                 → Stop and remove\n"
  printf "  docker-compose build                                → Build images\n"
  printf "  docker-compose logs                                 → Show logs\n"
  printf "  docker-compose exec svc sh                          → Shell in container\n"
  printf "%s\n" "$br"
  printf "${H2}other:${NC}\n"
  printf "  docker-compose ps                                   → List containers\n"
  printf "  docker-compose restart svc                          → Restart service\n"
  printf "%s\n" "$br"
}

function dktt() {
  printf "${BOLD}${H}docker cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}docker${NC}                 → dk (docker)\n"
  printf "                       → dkps (list running containers)\n"
  printf "                       → dkc (list all docker containers)\n"
  printf "                       → dki (list docker images)\n"
  printf "                       → dkdf (run docker system df)\n"
  printf "                       → dkl (run docker logs <requires at least 1 argument CONTAINER>)\n"
  printf "                       → dklf (docker logs -f <requires at least 1 argument CONTAINER>)\n"
  printf "                       → dks (docker service <require COMMAND ie create, inspect, logs etc>)\n"
  printf "                       → dkrm (docker rm <requires at least 1 argument CONTAINER>)\n"
  printf "%s\n" "$br"
  printf "${H2}docker functions${NC}      \n"
  print_tt "$HOME/.bash_extras/.bash_docker_functions"
  printf "%s\n" "$br"
}

function vtt() {
  printf "${BOLD}${H}vim cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}modes:${NC}\n"
  printf "  i                    → Insert mode\n"
  printf "  Esc                  → Normal mode\n"
  printf "  :                    → Command mode\n"
  printf "%s\n" "$br"
  printf "${H2}navigation:${NC}\n"
  printf "  h j k l              → Left Down Up Right\n"
  printf "  w/b/e                → Next/Prev/End of word\n"
  printf "  0/$                  → Start/End of line\n"
  printf "  gg/G                 → Top/Bottom of file\n"
  printf "%s\n" "$br"
  printf "${H2}editing:${NC}\n"
  printf "  x                    → Delete char\n"
  printf "  dd                   → Delete line\n"
  printf "  yy                   → Yank (copy) line\n"
  printf "  p                    → Paste\n"
  printf "  u                    → Undo\n"
  printf "  Ctrl+r               → Redo\n"
  printf "  r<char>              → Replace char\n"
  printf "%s\n" "$br"
  printf "${H2}search:${NC}\n"
  printf "  /pattern             → Search forward\n"
  printf "  ?pattern             → Search backward\n"
  printf "  n/N                  → Next/Prev match\n"
  printf "%s\n" "$br"
  printf "${H2}save & quit:${NC}\n"
  printf "  :w                   → Save\n"
  printf "  :q                   → Quit\n"
  printf "  :wq                  → Save & Quit\n"
  printf "  :q!                  → Quit without saving\n"
  printf "%s\n" "$br"
}

function ttt() {
  printf "${BOLD}${H}ttt: Command Reference${NC}\n"
  printf "%s\n" "$br"
  printf "  ${H2}%-20s %-30s %s${NC}\n" "Command" "Description" "Usage Example"
  printf "%s\n" "$br"
  printf "  %-20s %-30s %s\n" "c" "Clear the terminal" "c"
  printf "  %-20s %-30s %s\n" "cls" "Clear and list files" "cls"
  printf "  %-20s %-30s %s\n" "clss" "Clear and lsa" "clss"
  printf "  %-20s %-30s %s\n" "h" "Show command history" "h"
  printf "  %-20s %-30s %s\n" "x" "Exit the shell" "x"
  printf "  %-20s %-30s %s\n" "v" "Open vim editor" "v"
  printf "  %-20s %-30s %s\n" "j" "List background jobs" "j"
  printf "  %-20s %-30s %s\n" "df" "Show disk free space" "df -H"
  printf "  %-20s %-30s %s\n" "du" "Show disk usage" "du -ch"
  printf "  %-20s %-30s %s\n" "top" "Interactive process viewer" "top"
  printf "  %-20s %-30s %s\n" "top10" "Show top 10 CPU processes" "top10"
  printf "  %-20s %-30s %s\n" "dmesg10" "Last 10 kernel messages" "dmesg10"
  printf "  %-20s %-30s %s\n" "uptime" "Show system uptime" "uptime -p"
  printf "  %-20s %-30s %s\n" "mkcd" "Make and cd into directory" "mkcd mydir"
  printf "  %-20s %-30s %s\n" "rmd" "Remove directory recursively" "rmd mydir"
  printf "  %-20s %-30s %s\n" "mx" "Make file executable" "mx script.sh"
  printf "  %-20s %-30s %s\n" "000" "chmod 000 recursively" "000 mydir"
  printf "  %-20s %-30s %s\n" "644" "chmod 644 recursively" "644 mydir"
  printf "  %-20s %-30s %s\n" "666" "chmod 666 recursively" "666 mydir"
  printf "  %-20s %-30s %s\n" "755" "chmod 755 recursively" "755 mydir"
  printf "  %-20s %-30s %s\n" "777" "chmod 777 recursively" "777 mydir"
  printf "  %-20s %-30s %s\n" "ll" "List all files (long, human)" "ll"
  printf "  %-20s %-30s %s\n" "la" "List all files (almost all)" "la"
  printf "  %-20s %-30s %s\n" "l" "List files" "l"
  printf "  %-20s %-30s %s\n" "lsa" "List all files (long)" "lsa"
  printf "  %-20s %-30s %s\n" "lsd" "List directories only" "lsd"
  printf "  %-20s %-30s %s\n" "lt" "List files sorted by time" "lt"
  printf "  %-20s %-30s %s\n" "l." "List dotfiles" "l."
  printf "  %-20s %-30s %s\n" "home" "Go to home directory" "home"
  printf "  %-20s %-30s %s\n" "~" "Go to home directory" "~"
  printf "  %-20s %-30s %s\n" ".." "Go up one directory" ".."
  printf "  %-20s %-30s %s\n" "..." "Go up two directories" "..."
  printf "  %-20s %-30s %s\n" "...." "Go up three directories" "...."
  printf "  %-20s %-30s %s\n" ".4" "Go up four directories" ".4"
  printf "  %-20s %-30s %s\n" ".5" "Go up five directories" ".5"
  printf "  %-20s %-30s %s\n" "ga" "Git add" "ga file"
  printf "  %-20s %-30s %s\n" "gb" "Git branch" "gb"
  printf "  %-20s %-30s %s\n" "gbr" "Git fancy branch" "gbr"
  printf "  %-20s %-30s %s\n" "gc" "Git commit all message" "gc 'msg'"
  printf "  %-20s %-30s %s\n" "gcl" "Git show last commit" "gcl"
  printf "  %-20s %-30s %s\n" "gl" "Git log" "gl"
  printf "  %-20s %-30s %s\n" "gll" "Git big log" "gll"
  printf "  %-20s %-30s %s\n" "grr" "Git hard reset" "grr"
  printf "  %-20s %-30s %s\n" "gs" "Git status" "gs"
  printf "  %-20s %-30s %s\n" "myip" "Show public IP" "myip"
  printf "  %-20s %-30s %s\n" "ping" "Ping 5 times" "ping 8.8.8.8"
  printf "  %-20s %-30s %s\n" "p4" "Ping 4.2.2.2 4 times" "p4"
  printf "  %-20s %-30s %s\n" "ports" "Show open ports" "ports"
  printf "  %-20s %-30s %s\n" "ipt" "Iptables (sudo)" "ipt"
  printf "  %-20s %-30s %s\n" "iptlist" "List iptables rules" "iptlist"
  printf "  %-20s %-30s %s\n" "iptlistin" "List INPUT rules" "iptlistin"
  printf "  %-20s %-30s %s\n" "iptlistout" "List OUTPUT rules" "iptlistout"
  printf "  %-20s %-30s %s\n" "iptlistfw" "List FORWARD rules" "iptlistfw"
  printf "  %-20s %-30s %s\n" "firewall" "Show firewall rules" "firewall"
  printf "  %-20s %-30s %s\n" "header" "Show HTTP headers" "header example.com"
  printf "  %-20s %-30s %s\n" "headerc" "Show HTTP headers (compressed)" "headerc example.com"
  printf "  %-20s %-30s %s\n" "dnstop" "DNS traffic monitor" "dnstop"
  printf "  %-20s %-30s %s\n" "vnstat" "Network traffic monitor" "vnstat"
  printf "  %-20s %-30s %s\n" "iftop" "Network bandwidth monitor" "iftop"
  printf "  %-20s %-30s %s\n" "tcpdump" "Packet analyzer" "tcpdump"
  printf "  %-20s %-30s %s\n" "ethtool" "Ethernet tool" "ethtool"
  printf "  %-20s %-30s %s\n" "iwconfig" "Wireless config" "iwconfig"
  printf "  %-20s %-30s %s\n" "now/nowtime" "Show current time" "nowtime"
  printf "  %-20s %-30s %s\n" "nowdate" "Show current date" "nowdate"
  printf "  %-20s %-30s %s\n" "diskspace" "Show disk usage" "diskspace"
  printf "  %-20s %-30s %s\n" "folder" "Show current folder" "folder"
  printf "  %-20s %-30s %s\n" "path" "Show PATH variable" "path"
  printf "  %-20s %-30s %s\n" "now" "Reload .bashrc" "now"
  printf "  %-20s %-30s %s\n" "ebcr" "Edit .bashrc file" "ebcr"
  printf "  %-20s %-30s %s\n" "tree" "Directory tree" "tree"
  printf "  %-20s %-30s %s\n" "treed" "Directory tree (dirs only)" "treed"
  printf "  %-20s %-30s %s\n" "mountedinfo" "Show mounted filesystems" "mountedinfo"
  printf "  %-20s %-30s %s\n" "mktar" "Create tar archive" "mktar files"
  printf "  %-20s %-30s %s\n" "mkbz2" "Create bz2 archive" "mkbz2 files"
  printf "  %-20s %-30s %s\n" "mkgz" "Create gz archive" "mkgz files"
  printf "  %-20s %-30s %s\n" "untar" "Extract tar archive" "untar file.tar"
  printf "  %-20s %-30s %s\n" "unbz2" "Extract bz2 archive" "unbz2 file.tar.bz2"
  printf "  %-20s %-30s %s\n" "ungz" "Extract gz archive" "ungz file.tar.gz"
  printf "  %-20s %-30s %s\n" "so0" "Matrix effect" "so0"
  printf "%s\n" "$br"
}
