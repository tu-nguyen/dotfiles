# ~/.bash_extras/.bash_tt

br="${BOLD}${H}----------------------------------------------------------------------------------${NC}"

# Generalized function printer
function print_tt() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        echo "File not found: $file"
        return 1
    fi

    awk '
    BEGIN { comment="" }
    /^#/ { comment = $0; next }
    /^[a-zA-Z_][a-zA-Z0-9_]* *\(\) *\{/ {
        gsub(/^# *|^## */, "", comment)
        sub(/ *\(\) *\{/, "", $0)
        printf "  %-18s → %s\n", $0, comment
        comment=""
    }' "$file"
}

function tt() {
  printf "${BOLD}${H}tt cheatsheet${NC}\n"
  printf "%s\n" "$br"
  # TODO: add chmod aliases
  printf "${H2}primary functions${NC}    → ttt (show all tt)            → j (jobs -l)\n"
  printf "                     → cls (clear and ls)           → df (df -H)\n"
  printf "                     → mkcd (mkdir then cd)         → du (du -ch)\n"
  printf "                     → h (history)                  → dmesg10 (10 recent logs)\n"
  printf "                     → x (exit)                     → top (htop)\n"
  printf "                     → v (vim)                      → top10 (top 10 ps)\n"
  # ls
  printf "%s\n" "$br"
  printf "${H2}ls & cd${NC}              → ll (ls -alh)                 → ~ (cd ~)\n"
  printf "                     → la (ls -A)                   → .. (cd ..)\n"
  printf "                     → lsd (ls -a1F | grep /$)      → ... (cd ../..)\n"
  printf "                     → lt (la -lt)                  → .... (cd ../../..)\n"
  printf "                     → la (ls -A)                   → .4 (../../../../)\n"
  # cd
  printf "%s\n" "$br"
  printf "${H2}utils${NC}                → myip (get ip)                → now/nowtime (time)\n"
  printf "                     → ping (ping -c 5)             → nowdate (date)\n" 
  printf "                     → p4 (ping 4.2.2.2 -c 4)       → ipt (sudo /sbin/iptables)\n"
  printf "                     → ports (netstat -tulanp)      → diskspace (du)\n"
  printf "                     → folder ()                    → path ()→\n"
  # other
  printf "%s\n" "$br"
  printf "${H2}other functions${NC}      \n"
  print_tt "$HOME/.bash_extras/.bash_functions"
  # other other
  printf "%s\n" "$br"
  printf "${H2}other tt${NC}      \n"
  printf "  btt                → to view bash cheatsheet\n"
  printf "  vtt                → to view vim cheatsheet\n"
  printf "  gtt                → to view git aliases\n"
  printf "  dktt               → to view docker stuff\n"

  if [[ ! -f "$HOME/.bash_extras/.bash_twork" ]]; then
    printf "  tworktt            → .bash_twork ${RED}does not exist${NC} inside $HOME/.bash_extras/.bash_extras\n"
  else
    printf "  tworktt            → to view twork stuff\n"
  fi
  printf "%s\n" "$br"
}

function btt() {
  printf "${BOLD}${H}bash cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}navigation:${NC}\n"
  printf "  cd dir             → Change directory\n"
  printf "  cd -               → Previous directory\n"
  printf "  pwd                → Print working directory\n"
  printf "  ls -al             → List files\n"
  printf "%s\n" "$br"
  printf "${H2}file ops:${NC}\n"
  printf "  cp src dst         → Copy file\n"
  printf "  mv src dst         → Move/rename file\n"
  printf "  rm file            → Remove file\n"
  printf "  mkdir dir          → Make directory\n"
  printf "  touch file         → Create empty file\n"
  printf "%s\n" "$br"
  printf "${H2}search:${NC}\n"
  printf "  grep PATTERN file  → Search in file\n"
  printf "  find . -name '*.sh'→ Find files\n"
  printf "%s\n" "$br"
  printf "${H2}process:${NC}\n"
  printf "  ps aux             → List processes\n"
  printf "  top                → Interactive process viewer\n"
  printf "  kill PID           → Kill process\n"
  printf "%s\n" "$br"
  printf "${H2}history & jobs:${NC}\n"
  printf "  history            → Show command history\n"
  printf "  !!                 → Repeat last command\n"
  printf "  !n                 → Repeat command n\n"
  printf "  jobs               → List background jobs\n"
  printf "  fg/bg              → Foreground/background job\n"
  printf "%s\n" "$br"
  printf "${H2}shortcuts:${NC}\n"
  printf "  Ctrl+a             → Start of line\n"
  printf "  Ctrl+e             → End of line\n"
  printf "  Ctrl+r             → Reverse search history\n"
  printf "  Ctrl+c             → Cancel command\n"
  printf "  Ctrl+d             → Logout/EOF\n"
  printf "%s\n" "$br"
  printf "${H2}scripting:${NC}\n"
  printf "  echo \"text\"        → Print text\n"
  printf "  VAR=value          → Set variable\n"
  printf "  \$VAR               → Use variable\n"
  printf "  for i in *; do ... done\n"
  printf "  if ...; then ...; fi\n"
  printf "  function fname() { ... }\n"
  printf "%s\n" "$br"
}

function vtt() {
  printf "${BOLD}${H}vim cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}modes:${NC}\n"
  printf "  i                  → Insert mode\n"
  printf "  Esc                → Normal mode\n"
  printf "  :                  → Command mode\n"
  printf "%s\n" "$br"
  printf "${H2}navigation:${NC}\n"
  printf "  h j k l            → Left Down Up Right\n"
  printf "  w/b/e              → Next/Prev/End of word\n"
  printf "  0/$                → Start/End of line\n"
  printf "  gg/G               → Top/Bottom of file\n"
  printf "%s\n" "$br"
  printf "${H2}editing:${NC}\n"
  printf "  x                  → Delete char\n"
  printf "  dd                 → Delete line\n"
  printf "  yy                 → Yank (copy) line\n"
  printf "  p                  → Paste\n"
  printf "  u                  → Undo\n"
  printf "  Ctrl+r             → Redo\n"
  printf "  r<char>            → Replace char\n"
  printf "%s\n" "$br"
  printf "${H2}search:${NC}\n"
  printf "  /pattern           → Search forward\n"
  printf "  ?pattern           → Search backward\n"
  printf "  n/N                → Next/Prev match\n"
  printf "%s\n" "$br"
  printf "${H2}save & quit:${NC}\n"
  printf "  :w                 → Save\n"
  printf "  :q                 → Quit\n"
  printf "  :wq                → Save & Quit\n"
  printf "  :q!                → Quit without saving\n"
  printf "%s\n" "$br"
}

function gtt() {
  printf "${BOLD}${H}git cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}git${NC}                  → ga (add)                     → gb (branch)\n"
  printf "                     → gs (status)                  → gbr (fance branch)\n"
  printf "                     → gc (cam)                     → gcl (cl show last commit)\n"
  printf "                     → cl (log)                     → gll (bigger log)\n"
  printf "                     → crr (hard reset)             \n"
  printf "${H2}git alt${NC}              → s (status -s)                → b (fancy branch)\n"
  printf "                     → st (status)                  → br (branch)\n"
  printf "                     → co (checkout)                → a (add)\n"
  printf "                     → cob (checkout -b)            → ap (add -p)\ \n"
  printf "                     → coB (checkout -B)            → l(diff)\n"
  printf "                     → c (commit)                   → d (diff)\n" 
  printf "                     → ca (commit -a)               → ds (diff --stat)\n" 
  printf "                     → cm (commit -m)               → dc (diff --cached)\n"
  printf "                     → cam (commit -a -m)           \n" 
  printf "                     → m (commit -m)                → ${H2}la${NC} (to ALL git config)\n" 
  printf "%s\n" "$br"
  printf "${H2}git functions${NC}      \n"
  printf "  gpull              → Git pull with rebase and autostash\n"
  printf "  gpush              → Git push with set-upstream\n"
  printf "  gco                → Switch to a specified Git branch with confirmation\n"
  printf "  gcob               → Same as above but with fallback to create a branch\n"
  printf "%s\n" "$br"
}

function dktt() {
  printf "${BOLD}${H}docker cheatsheet${NC}\n"
  printf "%s\n" "$br"
  printf "${H2}docker${NC}               → dk (docker)\n"
  printf "                     → dkps (list running containers)\n"
  printf "                     → dkc (list all docker containers)\n"
  printf "                     → dki (list docker images)\n"
  printf "                     → dkdf (run docker system df)\n"
  printf "                     → dkl (run docker logs <requires at least 1 argument CONTAINER>)\n"
  printf "                     → dklf (docker logs -f <requires at least 1 argument CONTAINER>)\n"
  printf "                     → dks (docker service <require COMMAND ie create, inspect, logs etc>)\n"
  printf "                     → dkrm (docker rm <requires at least 1 argument CONTAINER>)\n"
  printf "%s\n" "$br"
  printf "${H2}docker functions${NC}      \n"
  print_tt "$HOME/.bash_extras/.bash_docker_functions"
  printf "%s\n" "$br"
}

function ttt() {
  printf "ttt (show all tt) \n"
  printf "c (clear) \n"
  printf "cls (clear && ls) \n"
  printf "clss (clear && lsa) \n"
  printf "h (history)   \n"
  printf "x (exit) \n"
  printf "v (vim)   \n"
  printf "j (jobs -l)\n"
  printf "df (df -H) \n"
  printf "du (du -ch) \n"
  printf "top (htop) \n"
  printf "top10 (ps -eo pid,comm,%cpu,%mem --sort=-%cpu | head -n 11) \n"
  printf "dmesg10 (dmesg | tail -n 10) \n"
  printf "uptime (uptime -p) \n"
  printf "mkcd (mkdir -p $1 && cd $1) \n"
  printf "rmd (rm -rf)   \n"
  printf "mx (chmod a+x)"
  printf "000 (chmod -R 000)"
  printf "644 (chmod -R 644)"
  printf "666 (chmod -R 666)"
  printf "755 (chmod -R 755)"
  printf "777 (chmod -R 777)"
  printf "ll (ls -alh)  \n"
  printf "la (ls -aAlh) \n"
  printf "l (ls) \n"
  printf "lsa (ls -al) \n"
  printf "lsd (ls -a1F | grep /$) \n"
  printf "lt (la -lt)  \n"
  printf "l. (ls -d .* -G)  \n"
  printf "home (cd ~) \n"
  printf "~ (cd ~) \n"
  printf ".. (cd ..) \n"
  printf "... (cd ../..) \n"
  printf ".... (cd ../../..) \n"
  printf ".4 (../../../../)\n"
  printf ".5 (../../../../..) \n"
  printf "ga (git a) \n"
  printf "gb (git b) \n"
  printf "gbr (git br) \n"
  printf "gc (git cam) \n"
  printf "gcl (git cl) \n"
  printf "gl (git l) \n"
  printf "gll (git ll) \n"
  printf "grr (git rr) \n"
  printf "gs (git st) \n"
  printf "myip (get ip) \n"
  printf "ping (ping -c 5)  \n"
  printf "p4 (ping 4.2.2.2 -c 4)  \n"
  printf "ports (netstat -tulanp)  \n"
  printf "ipt (sudo /sbin/iptables) \n"
  printf "iptlist (sudo /sbin/iptables -L -n -v --line-numbers) \n"
  printf "iptlistin (sudo /sbin/iptables -L INPUT -n -v --line-numbers) \n"
  printf "iptlistout (soursudo /sbin/iptables -L OUTPUT -n -v --line-numbers) \n"
  printf "iptlistfw (sudo /sbin/iptables -L FORWARD -n -v --line-numbers) \n"
  printf "firewall (iptlist) \n"
  printf "header (curl -I) \n"
  printf "headerc (curl -I --compress) \n"
  printf "dnstop (dnstop -l 5  eth1) \n"
  printf "vnstat (vnstat -i eth1) \n"
  printf "iftop (iftop -i eth1) \n"
  printf "tcpdump (tcpdump -i eth1 \n"
  printf "ethtool (ethtool eth1) \n"
  printf "iwconfig (iwconfig wlan0) \n"
  printf "now/nowtime (time) \n"
  printf "nowdate (date) \n"
  printf "diskspace (du) \n"
  printf "folder () \n"
  printf "path () \n"
  printf "now (source .bashrc) \n"
  printf "nowtime (source .bashrc) \n"
  printf "nowdate (source .bashrc) \n"
  printf "ebcr (Edit .bashrc file) \n"
  printf "tree (tree -CAhF --dirsfirst) \n"
  printf "treed (tree -CAFd) \n"
  printf "mountedinfo (df -hT) \n"
  printf "mktar (tar -cvf) \n"
  printf "mkbz2 (tar -cvjf) \n"
  printf "mkgz (tar -cvzf) \n"
  printf "untar (tar -xvf) \n"
  printf "unbz2 (tar -xvjf) \n"
  printf "ungz (tar -xvzf) \n"
  printf "so0 (cmatrix) \n"
}
